class MV {
	public static Object help() {
		println (new File(System.getProperty("user.home")+File.separator+".groovy"+File.separator+"groovysh.rc").text);
	}

	private static javax.swing.JFileChooser jfcOpen(boolean allowMultiple) {
		javax.swing.JFileChooser jfc = new javax.swing.JFileChooser();
		jfc.setMultiSelectionEnabled(allowMultiple);
		javax.swing.SwingUtilities.invokeAndWait({jfc.showOpenDialog(null);});
		return jfc;
	}

	public static Object of() {
		return jfcOpen(false).selectedFile;
	}

	public static Object ofs() {
		return jfcOpen(true).selectedFiles;
	}

	public static Object ld() {
		MV.ld(null);
	}

	public static Object ld(param) {
		MV.ldc(param, MV.class.classLoader.rootLoader);
	}

	public static Object ldc(param, classloader) {
		if(param==null) {
			Object closure = {
				final javax.swing.JFileChooser jfc = new javax.swing.JFileChooser();
				jfc.setMultiSelectionEnabled(true);
				javax.swing.SwingUtilities.invokeAndWait({ jfc.showOpenDialog(null); });
				return jfc.selectedFiles;
			};
			closure.call().each{ MV.ldc(it,classloader); }
		} else if(param instanceof File) {
			if(!param.exists()) {
				println "! Note: file does not exist now - "+param.absolutePath;
			}
			MV.ldc(param.toURI().toURL(), classloader)
		} else if(param instanceof java.net.URL) {
			println "Adding to classpath: "+param;
			classloader.addURL(param);
		} else if(param instanceof Iterable) {
			param.each{ MV.ldc(it,classloader); }
		} else if(param instanceof Object[]) {
			param.each{ MV.ldc(it,classloader); }
		} else {
			MV.ldc(new File(param.toString()),classloader);
		}
	}

	public static Object c() {
		return java.awt.Toolkit.defaultToolkit.systemClipboard.getContents(null).getTransferData(new java.awt.datatransfer.DataFlavor(String.class, "String"));
	}

	public static Object c(content) {
		return java.awt.Toolkit.defaultToolkit.systemClipboard.setContents(new java.awt.datatransfer.StringSelection(content.toString()), null);
	}

	public static Object exe(cmd) {
		StringBuffer sout = new StringBuffer();
		StringBuffer serr = new StringBuffer();
		Object proc = cmd.execute(null, new File("/"));
		proc.consumeProcessOutput(sout, serr);
		proc.waitForOrKill(3000000);
		return sout.toString();
	}

	public static Object fork(closure) {
		return new Thread(closure);
	}

	public static Object grab(final String... params) {
		grab([group:params.length>0?params[0]:null, module:params.length>1?params[1]:null, version:params.length>2?params[2]:null, classifier:params.length>3?params[3]:null]);
	}
	
	public static Object grab(Map params) {
		groovy.grape.Grape.grab(params);
	}

	public static Object tclock() {
		javax.swing.JFrame f = new javax.swing.JFrame();
		f.setUndecorated(true);
		final javax.swing.JLabel lbl = new javax.swing.JLabel("00:00:00");
		f.contentPane.setLayout(new java.awt.BorderLayout());
		f.contentPane.add(lbl, java.awt.BorderLayout.CENTER);
		lbl.setForeground(new java.awt.Color(255,255,255,255));
		f.setBackground(new java.awt.Color(0,0,0,0));
		lbl.setFont(lbl.font.deriveFont(20.0f));
		f.pack();
		f.setVisible(true);
		//f.move(2260, 320);

		Thread th = new Thread({
			while(true) {
				lbl.setText(new java.text.SimpleDateFormat("HH:mm:ss").format(new Date()));
				Thread.sleep(500);
			}
		});
		th.setDaemon(true);
		th.start();
		return f;
	}

	public static Object fxml(xmlString) {
		Object docBuilder = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder();
		Object document = docBuilder.parse(new org.xml.sax.InputSource(new StringReader(xmlString)));

		Object factory = javax.xml.transform.TransformerFactory.newInstance();
		factory.setAttribute("indent-number", new Integer(2));
		Object transformer = factory.newTransformer();
		transformer.setOutputProperty("indent", "yes");
		transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

		Object source = new javax.xml.transform.dom.DOMSource(document);
		Object result = new javax.xml.transform.stream.StreamResult(new StringWriter());
		transformer.transform(source, result);
		return result.getWriter().toString();
	}

	public static Object fjson(jsonString) {
		return groovy.json.JsonOutput.prettyPrint(jsonString);
	}

	public static Object enframesc(component) {
		return MV.enframe(new javax.swing.JScrollPane(component));
	}

	public static Object enframe(component) {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		frame.contentPane.setLayout(new java.awt.BorderLayout());
		frame.contentPane.add(component, java.awt.BorderLayout.CENTER);
		frame.pack();
		frame.setVisible(true);
		return frame;
	}

	public static Object source(gsh, param, parent) {
		if(param==null) {
			Object closure = {
				jfc = new javax.swing.JFileChooser(); jfc.setMultiSelectionEnabled(true);
				javax.swing.SwingUtilities.invokeAndWait({ jfc.showOpenDialog(null); });
				return jfc.selectedFiles;
			};
			closure.call().each{ MV.source(it, parent); }
		} else if(param instanceof File) {
			if(!param.exists()) {
				println "! File does not exist - "+param.absolutePath;
			} else {
				println "Evaluating file "+param.absolutePath;
				File rcFile = new File(System.getProperty("user.home")+File.separator+".groovy"+File.separator+"groovysh.rc");
				String code = param.text;
				if(rcFile.exists()) {
					code=rcFile.text+"\n\n"+code;
				}
				Object xbinding = gsh.binding;
				if(parent!=null && parent.binding!=null) {
					xbinding = parent.binding;
				}
				Object xshell = new GroovyShell(xbinding);
				Object xscript = xshell.parse(code);
				xscript.run();
				return xscript;
			}
		} else if(param instanceof Iterable) {
			param.each{ MV.source(it, parent); }
		} else if(param instanceof Object[]) {
			param.each{ MV.source(it, parent); }
		} else {
			MV.source(new File(param.toString()), parent);
		}
	}

	public static int benchmark(closure) {
		int t1 = System.currentTimeMillis();
		closure.call();
		int t2 = System.currentTimeMillis();
		return t2 - t1;
	}

	public static int benchmark(org.codehaus.groovy.runtime.GeneratedClosure closure, Integer n) {
		int t1 = System.currentTimeMillis();
		int i = n;
		while(i-->0) {
			closure.call();
		}
		int t2 = System.currentTimeMillis();
		return ((double)(t2 - t1))/n;
	}
}