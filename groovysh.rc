def mv_Help() { println (new File(System.getProperty("user.home")+File.separator+".groovy"+File.separator+"groovysh.rc").text); }

def mv_OF() { jfc = new javax.swing.JFileChooser(); jfc.setMultiSelectionEnabled(false); javax.swing.SwingUtilities.invokeAndWait({jfc.showOpenDialog(null);}); return jfc.selectedFile; }

def mv_OFs() { jfc = new javax.swing.JFileChooser(); jfc.setMultiSelectionEnabled(false); javax.swing.SwingUtilities.invokeAndWait({jfc.showOpenDialog(null);}); return jfc.selectedFiles; }

def mv_LDp(String path) { this.class.classLoader.rootLoader.addURL(new File(path).toURI().toURL()); }

def mv_LDf(file) { this.class.classLoader.rootLoader.addURL(file.toURI().toURL()); }

def mv_LD() { closure = { jfc = new javax.swing.JFileChooser(); jfc.setMultiSelectionEnabled(true); javax.swing.SwingUtilities.invokeAndWait({ jfc.showOpenDialog(null); }); return jfc.selectedFiles; }; closure.call().each{ this.class.classLoader.rootLoader.addURL(it.toURI().toURL()); } };

def mv_C() { return java.awt.Toolkit.defaultToolkit.systemClipboard.getContents(null).getTransferData(new java.awt.datatransfer.DataFlavor(String.class, "String")); }

def mv_CP(content) { return java.awt.Toolkit.defaultToolkit.systemClipboard.setContents(new java.awt.datatransfer.StringSelection(content.toString()), null); }

def mv_EXE(cmd) {
sout = new StringBuffer();
serr = new StringBuffer();
proc = cmd.execute(null, new File("/"));
proc.consumeProcessOutput(sout, serr);
proc.waitForOrKill(3000000);
return sout.toString();
}

def mv_Fork(closure) {
	return new Thread() {
		public void run() { closure.call(); }
	};
}

def mv_Grab(Object... params) {
import groovy.grape.Grape                        
import groovyx.net.http.*
Grape.grab(params)
}

def mv_TClock() {
f = new javax.swing.JFrame();
f.setUndecorated(true);
lbl = new javax.swing.JLabel("00:00:00");
f.contentPane.setLayout(new java.awt.BorderLayout());
f.contentPane.add(lbl, java.awt.BorderLayout.CENTER);
lbl.setForeground(new java.awt.Color(255,255,255,255));
f.setBackground(new java.awt.Color(0,0,0,0));
lbl.setFont(lbl.font.deriveFont(20.0f));
f.pack();
f.setVisible(true);
//f.move(2260, 320);

new Thread() { private lbl=null; public Thread init(javax.swing.JLabel lbl) { this.lbl = lbl; this.setDaemon(true); return this; }; public void run() { while(true) { lbl.setText(new java.text.SimpleDateFormat("HH:mm:ss").format(new Date())); Thread.sleep(500); } }}.init(lbl).start();
return f;
}

def mv_fxml(xmlString) {
docBuilder = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder();
document = docBuilder.parse(new org.xml.sax.InputSource(new StringReader(xmlString)));

factory = javax.xml.transform.TransformerFactory.newInstance();
factory.setAttribute("indent-number", new Integer(2));
transformer = factory.newTransformer();
transformer.setOutputProperty("indent", "yes");
transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

source = new javax.xml.transform.dom.DOMSource(document);
result = new javax.xml.transform.stream.StreamResult(new StringWriter());
transformer.transform(source, result);
xmlString = result.getWriter().toString();
return xmlString;
}

def mv_fjson(jsonString) {
return groovy.json.JsonOutput.prettyPrint(jsonString);
}

def mv_enframe(component) {
frame = new javax.swing.JFrame();
frame.contentPane.setLayout(new java.awt.BorderLayout());
frame.contentPane.add(new javax.swing.JScrollPane(component), java.awt.BorderLayout.CENTER);
frame.pack();
frame.setVisible(true);
return frame;
}
